# -*- coding: utf-8 -*-
"""Rainfall Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a_w1OkXWOASLmBKVM8CxHBbHz2zn_iPV
"""

import numpy as np # for numerical computations in Python. Used for arrays, mathematical functions etc.
import pandas as pd # Library for data manipulation and analysis. Provides DataFrame and Series structures.
import matplotlib.pyplot as plt # Plotting library used for data visualization (e.g., line plots, bar charts).
import seaborn as sb # Statistical data visualization library built on top of matplotlib. Provides prettier and more complex plots (like heatmaps, violin plots).

from sklearn.model_selection import train_test_split # Splits data into training and testing subsets.
from sklearn.preprocessing import StandardScaler # Standardizes features by removing the mean and scaling to unit variance (z-score normalization).
from sklearn import metrics # Contains functions for evaluating model performance (e.g., accuracy, precision, recall).
from sklearn.svm import SVC # Support Vector Classifier: A type of machine learning model useful for classification tasks.
from xgboost import XGBClassifier # XGBoost Classifier: A powerful gradient boosting model used for classification problems. Known for high accuracy and performance.
from sklearn.linear_model import LogisticRegression # Logistic Regression: A linear model for binary or multiclass classification.
from imblearn.over_sampling import RandomOverSampler # RandomOverSampler: Balances class distribution by randomly duplicating samples from the minority class. Useful in imbalanced classification problems.

# Suppresses warning messages during execution, keeping the output cleaner. Common in notebooks to avoid cluttering the output with non-critical warnings.
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('Rainfall.csv')
df.head()

df.shape
df.info()
df.describe().T

df.isnull().sum()
df.columns

df.rename(str.strip,
          axis='columns',
          inplace=True)

df.columns

for col in df.columns:

  # Checking if the column contains
  # any null values
  if df[col].isnull().sum() > 0:
    val = df[col].mean()
    df[col] = df[col].fillna(val)

df.isnull().sum().sum()


# Exploratory Data Analysis
plt.pie(df['rainfall'].value_counts().values,
        labels = df['rainfall'].value_counts().index,
        autopct='%1.1f%%')
plt.show()

df.groupby('rainfall').mean()

features = list(df.select_dtypes(include = np.number).columns)
features.remove('day')
print(features)

plt.subplots(figsize=(15,8))

for i, col in enumerate(features):
  plt.subplot(3,4, i + 1)
  sb.distplot(df[col])
plt.tight_layout()
plt.show()

df.replace({'yes':1, 'no':0}, inplace=True)

plt.figure(figsize=(10,10))
sb.heatmap(df.corr() > 0.8,
           annot=True,
           cbar=False)
plt.show()


df.drop(['maxtemp', 'mintemp'], axis=1, inplace=True)

# Model Training
features = df.drop(['day', 'rainfall'], axis=1)
target = df.rainfall

X_train, X_val, \
    Y_train, Y_val = train_test_split(features,
                                      target,
                                      test_size=0.2,
                                      stratify=target,
                                      random_state=2)

# As the data was highly imbalanced we will
# balance it by adding repetitive rows of minority class.
ros = RandomOverSampler(sampling_strategy='minority',
                        random_state=22)
X, Y = ros.fit_resample(X_train, Y_train)

# Normalizing the features for stable and fast training.
scaler = StandardScaler()
X = scaler.fit_transform(X)
X_val = scaler.transform(X_val)

# LogisticRegression
# XGBClassifier
# SVC

models = [LogisticRegression(), XGBClassifier(), SVC(kernel='rbf', probability=True)]

for i in range(3):
  models[i].fit(X, Y)

  print(f'{models[i]} : ')

  train_preds = models[i].predict_proba(X)
  print('Training Accuracy : ', metrics.roc_auc_score(Y, train_preds[:,1]))

  val_preds = models[i].predict_proba(X_val)
  print('Validation Accuracy : ', metrics.roc_auc_score(Y_val, val_preds[:,1]))
  print()


# Model Evaluation
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn import metrics

ConfusionMatrixDisplay.from_estimator(models[2], X_val, Y_val)
plt.show()

print(metrics.classification_report(Y_val,
                                    models[2].predict(X_val)))